#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
    Copyright 2018 copyright@mzpqnxow.com

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice, this
       list of conditions and the following disclaimer in the documentation and/or other
       materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its contributors may be
       used to endorse or promote products derived from this software without specific
       prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
    SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
    TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


    What this snippet contains:

    - An OrederedDict YaML loader, for preserving order of YaML files
    - A nested/two-pass Jinja2 templating function working on any type of object

    Very useful in configuration files written in YaML that require re-use of values which
    is better solved using variables within the YaML. The `nested_template` function permits
    the following transformation, as an example:
"""
from __future__ import print_function, unicode_literals
import argparse
from collections import OrderedDict
from contextlib import contextmanager
from errno import ENOENT
from logging import (basicConfig as configure_log_basic, getLogger as
                     get_logger, DEBUG as LOGLEVEL_DEBUG, INFO as
                     LOGLEVEL_INFO, WARN as LOGLEVEL_WARN, ERROR as
                     LOGLEVEL_ERROR, CRITICAL as LOGLEVEL_CRITICAL)
from os import (environ, chdir, access, X_OK, chmod, mkdir, getcwd, symlink as
                ln)
from os.path import (abspath, basename, dirname, expanduser, expandvars,
                     isfile, isdir, join as join_path, pathsep, sep as DIRSEP)
from re import search as regex_search
from shutil import copyfile, copytree
from string import ascii_letters, digits
from subprocess import check_call

try:
    from yaml import CLoader as Loader, SafeDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper
from yaml.representer import SafeRepresenter
from yaml import load as load_yaml_plain, safe_dump as dump_yaml_plain
import yaml

from jinja2 import (Template, Environment, FileSystemLoader)

configure_log_basic()
LOG = get_logger(__name__)
LOG.setLevel(LOGLEVEL_DEBUG)
INFO = LOG.info
CRIT = LOG.critical
WARN = LOG.warn
DEBUG = LOG.debug
ERROR = LOG.error
FATAL = LOG.fatal

VALID_REQUEST_NAME_CHARSET = ascii_letters + digits + '-_.'

# Capture our current directory
CURDIR = dirname(abspath(__file__))

TEMPLATES = 'templates'
CONF = 'ca_configs'

DEFAULT_YAML_CONFIG_PATH = join_path(CONF, 'ca.yml.j2')
DEFAULT_TEMPLATE_PATH = join_path(TEMPLATES, 'openssl.cnf.j2')


@contextmanager
def pushd(directory):
    """ Emulate Bash pushd/popd """
    cwd = getcwd()
    try:
        chdir(directory)
    except OSError as err:
        if err.errno == ENOENT:
            raise RuntimeError('%s does not exist !!' % directory)
        else:
            raise err
    yield
    chdir(cwd)


def which(program):
    """Emulate the UNIX `which` command, trusting the user's environment"""

    def is_exe(fpath):
        """check if a file is executable for the current user"""
        return isfile(fpath) and access(fpath, X_OK)

    if DIRSEP in program:
        if is_exe(program):
            return program
    else:
        for search_path in environ['PATH'].split(pathsep):
            search_path = search_path.strip('"')
            exe_file = join_path(search_path, program)
            if is_exe(exe_file):
                return exe_file
    return None


def file_write(src,
               dst,
               content=None,
               fail_on_exist=True,
               create_path=False,
               mode=None):
    """Return None on failure, raise exception on failure by default

       If `src` is None, touch the file `dst`
       If `src` is None and content is not None, seed it with the contents
       of `data`
    """
    if fail_on_exist is True and dst and (isfile(dst) or isdir(dst)):
        ERROR('file "{}" already exists, are you doing something by mistake?'.
              format(dst))
        exit(1)
    if create_path is True:
        mkdir_parents(dirname(dst))
    try:
        if src is None:
            with open(dst, 'w') as writefd:
                if content is not None:
                    writefd.write(content)
        else:
            copyfile(src, dst)
    except IOError as err:
        raise
    except Exception as err:
        CRIT('Unexpected exception, investigate plz, kthx')
        raise (err)
    if mode is not None:
        chmod(dst, mode)
    return dst


def mkdir_parents(dirpath, fail_on_exist=False, mode=None):
    """emulate mkdir -p behavior"""
    if fail_on_exist is True:
        if isdir(dirpath) or isfile(dirpath):
            raise RuntimeError('path exists, remove or rethink your actions!!')
    path_stack = ''
    for element in dirpath.split(DIRSEP):
        if not isdir(dirpath):
            if not element:
                continue
            path_stack = join_path(DIRSEP, path_stack, element)
            if not isdir(path_stack):
                mkdir(path_stack)
    if mode is not None:
        chmod(dirpath, mode)


def nested_template(data, template_vars):
    """data is an arbitrary data structure, template_vars is a dict

    The `data` object is traversed and each instance of a Jinja2 variable
    that is found in template_vars is replaced (templated)

    This is a recursive function with the end-case being when the object is
    a simple string or unicode string type
    """

    if isinstance(data, (str, unicode)):
        tmpl = Template(data)
        data = tmpl.render(template_vars)
        return expandvars(expanduser(data))
    elif isinstance(data, dict):
        for key, value in data.iteritems():
            data[key] = nested_template(value, template_vars)
        return data
    elif isinstance(data, list):
        # Not supporting sets and tuples since YaML doesn't support them
        tmp_list = []
        data.reverse()
        while data:
            item = data.pop()
            item = nested_template(item, template_vars)
            tmp_list.append(item)
        return tmp_list
    elif isinstance(data, (int, float)):
        return data
    raise RuntimeError(
        'unexpected and unsupported type "{}" encountered'.format(type(data)))


def load_yaml_ordered(filename):
    """Load a YaML file as an OrderedDict

    Inspired by StackOverflow

    This function loads a YaML file, preserving order. It also
    detects duplicates of keys
    """
    with open(filename, 'r') as filefd:
        lines = filefd.read().splitlines()
        top_keys = []
        duped_keys = []
        for line in lines:
            match = regex_search(r'^([A-Za-z0-9_]+) *:', line)
            if match:
                if match.group(1) in top_keys:
                    duped_keys.append(match.group(1))
                else:
                    top_keys.append(match.group(1))
        if duped_keys:
            raise RuntimeError('ERROR: duplicate keys: {}'.format(duped_keys))
    with open(filename, 'r') as filefd:
        d_tmp = load_yaml_plain(filefd)
    return OrderedDict([(key, d_tmp[key]) for key in top_keys])


def save_params_to_ca_root(params, yaml_file):
    """Write a YaML file to the CA root for use when issuing certs"""

    def strip_double_slashes(obj):
        """Recursively clean up paths in a dict"""
        if isinstance(obj, (str, unicode)):
            return obj.replace('//', '/')

        if isinstance(obj, (list, set)):
            new_obj = []
            for item in obj:
                new_obj.append(strip_double_slashes(item))
            return new_obj

        if isinstance(obj, dict):
            for key, value in obj.iteritems():
                obj[key] = strip_double_slashes(value)
            return obj
        return obj

    params = strip_double_slashes(params)
    # yaml_file = strip_extension(yaml_file)[0]
    dump_yaml_plain(
        dict(params), open(yaml_file, 'wb'), default_flow_style=False)
    with pushd(dirname(yaml_file)):
        ln(basename(yaml_file), 'ca.yml')


def generate_ca_keypair(path_ca_pem, openssl_cnf_dst):
    environ['OPENSSL_CONF'] = openssl_cnf_dst
    DEBUG('Using OPENSSL_CONF={}'.format(openssl_cnf_dst))
    openssl_cmd = which('openssl')
    if openssl_cmd is None:
        raise RuntimeError('openssl command-line is not in your $PATH !!')
    DEBUG('Sending out to {}'.format(path_ca_pem))
    cmdline = [
        openssl_cmd, 'req', '-batch', '-x509', '-newkey', 'rsa:4096', '-out',
        path_ca_pem, '-outform', 'PEM', '-days', '36500'
    ]
    DEBUG('SHELL: {}'.format(' '.join(cmdline)))
    check_call(
        cmdline,
        stdout=open('/dev/null', 'wb'),
        stderr=open('/dev/null', 'wb'))


def build_ca_filesystem(params, args):
    """Build the filesystem layout for a new CA"""

    def _fs(ca_root, filename):
        return join_path(ca_root, filename)

    root = params['ca_fullpath_root']
    # Mark the root 700, but still be paranoid with the other
    # private directories just in case the user is dumber than
    # usual
    mkdir_parents(params['ca_fullpath_root'], mode=0700)
    mkdir_parents(_fs(root, 'etc'), mode=0700)
    mkdir_parents(_fs(root, 'private'), mode=0700)
    mkdir_parents(_fs(root, 'signedcerts'), mode=0700)
    mkdir_parents(_fs(root, 'requests'))
    mkdir_parents(_fs(root, 'crl'))
    mkdir_parents(_fs(root, 'certs'))
    file_write(None, _fs(root, 'serial'), content='01\n', fail_on_exist=True)
    file_write(None, _fs(root, 'index.txt'), fail_on_exist=True)
    file_write(None, _fs(root, 'index.txt.attr'), fail_on_exist=True)

    yaml_file = join_path(params['path_etc_dir'], basename(args.yaml_filepath))

    save_params_to_ca_root(params, yaml_file)
    copytree(
        join_path(CURDIR, 'example-input-files', 'issue-cert'),
        params['path_example_requests'])
    # file_write(
    #    join_path(CURDIR, 'example-input-filesissue-cert', 'example_request.yml'),
    #    params['path_example_request_file'], create_path=True)
    file_write(
        params['src_path_simple_template'],
        params['path_issue_cert_template_cnf'],
        create_path=True)
    file_write(
        params['src_path_issue_cert_script'],
        params['path_issue_cert_script'],
        create_path=True,
        mode=0755)
    return params['path_ca_cert'], params['installed_openssl_cnf']


def get_cnf(args):
    """Load configuration/templates"""
    data = load_yaml_ordered(args.yaml_filepath)
    data['CURDIR'] = CURDIR
    template_input_vars = data
    resolved = nested_template(data, template_input_vars)
    j2_env = Environment(loader=FileSystemLoader(CURDIR), trim_blocks=True)
    openssl_cnf_content = j2_env.get_template(
        args.template_filepath).render(resolved)
    return openssl_cnf_content, resolved


def openssl_cnf(args):
    openssl_cnf_content, resolved = get_cnf(args)
    file_write(
        None,
        resolved['installed_openssl_cnf'],
        content=openssl_cnf_content,
        fail_on_exist=False,
        create_path=True)
    return resolved


def main():
    """Entrypoint"""

    def cmdline():
        parser = argparse.ArgumentParser(
            description='Certificate Authority Generator')
        parser.add_argument(
            '-t',
            '--template',
            default=DEFAULT_TEMPLATE_PATH,
            help='Name of template in template/ directory, defaults to a sane value, not required',
            required=False,
            dest='template_filepath',
            metavar='templates/openssl.cnf.j2')
        parser.add_argument(
            '-y',
            '--yaml-config',
            default=DEFAULT_YAML_CONFIG_PATH,
            help='CA configuration file, see examples/ directory, specific to your CA',
            required=True,
            dest='yaml_filepath',
            metavar='acme_widgets_ca.yml')
        return parser.parse_args()

    def init_yaml():
        """Make YaML dumps orderely"""

        def dict_representer(dumper, data):
            return dumper.represent_dict(data.iteritems())

        def dict_constructor(loader, node):
            return OrderedDict(loader.construct_pairs(node))

        _mapping_tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG
        Dumper.add_representer(OrderedDict, dict_representer)
        Loader.add_constructor(_mapping_tag, dict_constructor)
        Dumper.add_representer(str, SafeRepresenter.represent_str)
        Dumper.add_representer(unicode, SafeRepresenter.represent_unicode)

    init_yaml()
    args = cmdline()
    resolved = openssl_cnf(args)
    path_ca_pem, installed_openssl_cnf = build_ca_filesystem(resolved, args)
    generate_ca_keypair(path_ca_pem, installed_openssl_cnf)
    INFO('Created new Certificate Authority @ {}'.format(path_ca_pem))


if __name__ == '__main__':
    main()
